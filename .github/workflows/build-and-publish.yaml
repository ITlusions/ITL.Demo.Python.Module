name: Build and Publish Python Package

on:
  push:
    branches:
      - 'feature/*'
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

permissions:
  contents: write
  packages: write

jobs:
  ci-build:
    if: |
        startsWith(github.ref, 'refs/heads/feature/') || 
        (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'closed') && 
        (github.base_ref == 'develop' || github.base_ref == 'main')) || 
        (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
          ls -l dist/

  release:
    needs: ci-build
    if: |
        (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && 
        (github.base_ref == 'develop' || github.base_ref == 'main')) || 
        (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Compute Version
        id: compute_version
        run: |
            git fetch --tags --force || true
            LAST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "1.0.0")
            BUILD_NUMBER=${{ github.run_number }}

            # Extract major, minor, and patch versions
            MAJOR=$(echo $LAST_TAG | cut -d'.' -f1)
            MINOR=$(echo $LAST_TAG | cut -d'.' -f2)
            PATCH=$(echo $LAST_TAG | cut -d'.' -f3)

            if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
              # Increment the patch version for releases on main
              PATCH=$((PATCH + 1))
              FULL_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            elif [[ "${{ github.ref }}" == 'refs/heads/develop' ]]; then
              # Use a development version for develop
              FULL_VERSION="${LAST_TAG}.dev.${BUILD_NUMBER}"
            elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
              # Include the branch name for feature branches
              BRANCH_NAME=$(echo "${{ github.ref }}" | cut -d'/' -f4)
              FULL_VERSION="${LAST_TAG}.${BRANCH_NAME}.${BUILD_NUMBER}"
            else
              # Default version for other branches
              FULL_VERSION="${LAST_TAG}.${BUILD_NUMBER}"
            fi

            echo "Computed version: $FULL_VERSION"
            echo "PACKAGE_VERSION=$FULL_VERSION" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
          ls -l dist/

    #   - name: Publish to GitHub Packages
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     run: |
    #       pip install twine
    #       python -m twine upload --repository-url https://api.github.com/orgs/${{ github.repository_owner }}/packages/pypi/upload dist/*
      - name: Push Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            # Configure git
            git config --global user.email "info@itlusions.nl"
            git config --global user.name "ActionsBot"
            git tag -a $PACKAGE_VERSION -m "Release $PACKAGE_VERSION"
            git push origin $PACKAGE_VERSION
